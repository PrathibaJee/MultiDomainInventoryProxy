{
	"info": {
		"_postman_id": "25a412ba-50df-4989-bcb8-8f6101360d0c",
		"name": "Tcc_MDIPv1.0.1",
		"description": "Simple InterfaceValidator for being published with TR-532 v2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "forLoadingInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");\r",
									"console.log(\"===== MDIP_v1.0.0 ========================================================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data;\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    const referenceSpecification = {\r",
									"        applicationName: \"MultiDomainInventoryProxy\",\r",
									"        // name of the application that shall be tested with this test case collection\r",
									"        releaseNumber: \"1.0.0\",\r",
									"        // release of the specification that defines the reference for the testing\r",
									"    };\r",
									"    // identification of the specification that shall be the reference for the testing\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"\r",
									"\r",
									"    let listOfConnectedMountNames = [];\r",
									"    // list of mount names resulting from addressing /v1/provide-list-of-connected-devices\r",
									"\r",
									"    const interfacesAtDevice = {                            //old: listOfInterfaces\r",
									"        mountName: \"\",\r",
									"        // mountName of the device that holds the listOfInterfaces\r",
									"        listOfInterfaces: []                                //old: interfaces\r",
									"        // list of {UUID, LocalID, layerProtocolName} for LogicalTerminationPoints at the device\r",
									"    };\r",
									"    // list of LTP identifiers resulting from addressing /v1/provide-list-of-device-interfaces\r",
									"\r",
									"    const actualEquipmentAtDevice = {\r",
									"        mountName: \"\",\r",
									"        // mountName of the device that holds the equipment\r",
									"        listOfEquipment: []\r",
									"        // UUIDs of equipment that has ActualEquipment\r",
									"    };\r",
									"    // list of ActualEquipment identifiers resulting from addressing /v1/provide-list-of-actual-device-equipment\r",
									"\r",
									"\r",
									"    let listOfResults = [\r",
									"        {\r",
									"            requestName: \"\",\r",
									"            // name of the Request in the Postman Request collection (pm.info.requestName)\r",
									"            method: \"\",\r",
									"            // GET, POST, PUT etc. applied for the request (pm.request.method)\r",
									"            url: \"\",\r",
									"            // http address addressed by the request (pm.request.url)\r",
									"            requestBody: \"\",\r",
									"            // sent body (pm.request.body.raw)\r",
									"            responseCode: 0,\r",
									"            // received http response code (pm.response.code)\r",
									"            responseBody: \"\",\r",
									"            // received body (pm.response.text())\r",
									"            responseHeaders: \"\",\r",
									"            // received headers (JSON.stringify(pm.response.headers))\r",
									"            executionDuration: \"\",\r",
									"            //  (pm.response.responseTime)\r",
									"            results: [\r",
									"                {\r",
									"                    assertionName: \"\",\r",
									"                    // Text that is represented in the CollectionRunner (free text field)\r",
									"                    result: \"\",\r",
									"                    // {PASS, FAIL} as represented in the CollectionRunner (free text field)\r",
									"                    failureReason: \"\"\r",
									"                    // Free text explaining the cause of failure  (free text field)\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ] // list of Requests, assertions and results\r",
									"\r",
									"\r",
									"    pm.environment.set(\"referenceSpecification\", referenceSpecification);\r",
									"\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"    pm.environment.set(\"listOfConnectedMountNames\", listOfConnectedMountNames);\r",
									"    pm.environment.set(\"interfacesAtDevice\", interfacesAtDevice);\r",
									"    pm.environment.set(\"actualEquipmentAtDevice\", actualEquipmentAtDevice);\r",
									"\r",
									"    pm.environment.set(\"listOfResults\", listOfResults);\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let mdip = {};\r",
									"    mdip = ExtractServerInformation(inputFromFile.serverList, \"mdip\");\r",
									"    uri = mdip.server + \"/v1/inform-about-application\";\r",
									"\r",
									"    let requestBody;\r",
									"    requestBody = '{}';\r",
									"\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"    pm.variables.set(\"requestBody\", requestBody);\r",
									"    \r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
									"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
									"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
									"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
									"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
									"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
									"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    console.log(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var referenceSpecification = {};\r",
									"var listOfResults = [];\r",
									"try {\r",
									"    referenceSpecification = pm.environment.get(\"referenceSpecification\");\r",
									"    listOfResults = pm.environment.get(\"listOfResults\")\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"var responseCode;\r",
									"var responseObject = {};\r",
									"try {\r",
									"    let response;\r",
									"    response = pm.response;\r",
									"\r",
									"    responseCode = parseInt(response.code);\r",
									"\r",
									"    if ( Math.floor(responseCode/100) === 2 ) {\r",
									"        responseObject = JSON.parse(response.stream)\r",
									"\r",
									"    } else {\r",
									"        responseObject = {}\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! result could not be extracted.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"var requestResult = {\r",
									"    requestName: pm.info.requestName,\r",
									"    method: pm.request.method,\r",
									"    url: pm.request.url.toString(),\r",
									"    requestBody: pm.request.body.raw,\r",
									"    responseCode: pm.response.code,\r",
									"    responseBody: pm.response.text(),\r",
									"    responseHeaders: pm.response.headers.toString(),\r",
									"    executionDuration: pm.response.responseTime,\r",
									"    results: []\r",
									"};\r",
									"try {\r",
									"    if ( Math.floor(responseCode/100) ===  2 ) {\r",
									"        console.log(\"Reference Specification:\");\r",
									"        console.log(\"   Application Name: \" + referenceSpecification.applicationName);\r",
									"        console.log(\"   Release Number:   \" + referenceSpecification.releaseNumber);\r",
									"        console.log(\"Application under Test:\");\r",
									"        console.log(\"   Application Name: \" + responseObject[\"application-name\"]);\r",
									"        console.log(\"   Release Number:   \" + responseObject[\"release-number\"]);\r",
									"\r",
									"        let assertionName = \"Application and release under test matches with reference specification\";\r",
									"        let result;\r",
									"        let failureReason = \"Application and release under test does not match with reference specification\";\r",
									"        if ( (referenceSpecification.applicationName==responseObject[\"application-name\"])\r",
									"                && (referenceSpecification.releaseNumber==responseObject[\"release-number\"]) ) {\r",
									"            console.log(\"ok: \" + assertionName)\r",
									"        } else {\r",
									"            console.log(\"FAIL: \" + failureReason)\r",
									"        };\r",
									"        pm.test(assertionName, function () {\r",
									"            result = \"FAIL\";\r",
									"            failureReason = \"Application under test does not match with reference specification\";\r",
									"            pm.expect(referenceSpecification.applicationName).to.equal(responseObject[\"application-name\"]);\r",
									"            failureReason = \"Release number of application under test does not match with reference specification\";\r",
									"            pm.expect(referenceSpecification.releaseNumber).to.equal(responseObject[\"release-number\"]);\r",
									"            result = \"PASS\"\r",
									"        });\r",
									"        let assertionResult = {\r",
									"            assertionName: assertionName,\r",
									"            result: result,\r",
									"            failureReason: failureReason\r",
									"        };\r",
									"        requestResult.results.push(assertionResult)\r",
									"\r",
									"    } else {\r",
									"        console.log(\"/v1/inform-about-application could not be read.\")\r",
									"    }\r",
									"\r",
									"    listOfResults.push(requestResult)\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! releaseNumber could not be extracted from /v1/inform-about-application.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Updating Environmental Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.set(\"listOfResults\", listOfResults)\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Services",
					"item": [
						{
							"name": "Completeness",
							"item": [
								{
									"name": "listOfConnectedDevices",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /v1/provide-list-of-connected-devices ===============================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let uri;\r",
													"    uri = mdip.server + \"/v1/provide-list-of-connected-devices\";\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"var listOfConnectedMountNames = [];\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"mount-name-list\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"mount-name-list\"\r",
													"        ]\r",
													"    };\r",
													"\r",
													"    listOfConnectedMountNames = responseObject[\"mount-name-list\"]\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: pm.response.text(),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of /v1/provide-list-of-connected-devices is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of /v1/provide-list-of-connected-devices could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of /v1/provide-list-of-connected-devices is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfConnectedMountNames\", listOfConnectedMountNames);\r",
													"\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "listOfInterfaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /v1/provide-list-of-device-interfaces ===============================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfConnectedMountNames = [];\r",
													"var interfacesAtDevice = {};\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\");\r",
													"    interfacesAtDevice = pm.environment.get(\"interfacesAtDevice\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var mountName;\r",
													"try {\r",
													"    mountName = ReturnOneStringFromList(listOfConnectedMountNames)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be processed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    interfacesAtDevice.mountName = mountName;\r",
													"    pm.environment.set(\"interfacesAtDevice\", interfacesAtDevice)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let uri;\r",
													"    uri = mdip.server + \"/v1/provide-list-of-device-interfaces\";\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{ \"mount-name\": \"' + mountName + '\" }';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var interfacesAtDevice = {};\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    interfacesAtDevice = pm.environment.get(\"interfacesAtDevice\");\r",
													"\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"var listOfInterfaces = [];\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"logical-termination-point-list\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\": { \"type\": \"string\" },\r",
													"                        \"local-id\": { \"type\": \"string\" },\r",
													"                        \"layer-protocol-name\": { \"type\": \"string\" }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"local-id\",\r",
													"                        \"layer-protocol-name\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"logical-termination-point-list\"\r",
													"        ]\r",
													"    };\r",
													"\r",
													"    listOfInterfaces = responseObject[\"logical-termination-point-list\"]\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\");\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: pm.response.text(),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of /v1/provide-list-of-device-interfaces is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of /v1/provide-list-of-device-interfaces could not be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of /v1/provide-list-of-device-interfaces is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    interfacesAtDevice.listOfInterfaces = listOfInterfaces;\r",
													"    pm.environment.set(\"interfacesAtDevice\", interfacesAtDevice);\r",
													"\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "listOfActualEquipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var actualEquipmentAtDevice = {};\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    actualEquipmentAtDevice = pm.environment.get(\"actualEquipmentAtDevice\");\r",
													"\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"var topLevelEquipment = [];\r",
													"var listOfEquipment = [];\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"top-level-equipment\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"actual-equipment-list\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\":                     { \"type\": \"string\" },\r",
													"                        \"equipment-type-name\":      { \"type\": \"string\" }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"equipment-type-name\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"top-level-equipment\",\r",
													"            \"actual-equipment-list\"\r",
													"        ]\r",
													"    };\r",
													"\r",
													"    topLevelEquipment = responseObject[\"top-level-equipment\"];\r",
													"    listOfEquipment = responseObject[\"actual-equipment-list\"]\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\");\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: pm.response.text(),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of /v1/provide-list-of-actual-device-equipment is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"/v1/provide-list-of-actual-device-equipment could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of /v1/provide-list-of-actual-device-equipment is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    actualEquipmentAtDevice.topLevelEquipment = topLevelEquipment;\r",
													"    actualEquipmentAtDevice.listOfEquipment = listOfEquipment;\r",
													"    pm.environment.set(\"actualEquipmentAtDevice\", actualEquipmentAtDevice);\r",
													"\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /v1/provide-list-of-actual-device-equipment =========================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfConnectedMountNames = [];\r",
													"var actualEquipmentAtDevice = {};\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\");\r",
													"    actualEquipmentAtDevice = pm.environment.get(\"actualEquipmentAtDevice\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var mountName;\r",
													"try {\r",
													"    mountName = ReturnOneStringFromList(listOfConnectedMountNames)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be processed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    actualEquipmentAtDevice.mountName = mountName;\r",
													"    pm.environment.set(\"actualEquipmentAtDevice\", actualEquipmentAtDevice)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let uri;\r",
													"    uri = mdip.server + \"/v1/provide-list-of-actual-device-equipment\";\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{ \"mount-name\": \"' + mountName + '\" }';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "listOfParallelLinks",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /v1/provide-list-of-parallel-links ==================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var linkId;\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    let services;\r",
													"    services = ExtractCollectionInput(collectionInputList, \"services\");\r",
													"    linkId = services.linkId\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let uri;\r",
													"    uri = mdip.server + \"/v1/provide-list-of-parallel-links\";\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{ \"link-id\": \"' + linkId + '\" }';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"parallel-link-list\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"parallel-link-list\"\r",
													"        ]\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\");\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: pm.response.text(),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of /v1/provide-list-of-parallel-links is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"/v1/provide-list-of-parallel-links could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of /v1/provide-list-of-parallel-links is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Headers",
							"item": [
								{
									"name": "outOfMwSdnDomainServiceForHeaders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseHeaders = [];\r",
													"try {\r",
													"    responseHeaders = pm.response.headers.members\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: \"not relevant for validating headers\",\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    console.log(\"responseHeaders: \");\r",
													"    console.log(responseHeaders);\r",
													"\r",
													"    let assertionName = \"life-cycle-state header has been provided\";\r",
													"    let result;\r",
													"    let failureReason = \"life-cycle-state header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    let assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"x-correlator header hasn't been provided\";\r",
													"    failureReason = \"x-correlator header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"exec-time header hasn't been provided\";\r",
													"    failureReason = \"exec-time header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"backend-time header hasn't been provided\";\r",
													"    failureReason = \"backend-time header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation of headers could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ConfirmHeaderBeingProvided(responseHeaders, header) {\r",
													"    for(let i=0; i<responseHeaders.length; i++) {\r",
													"        if(responseHeaders[i].key==header) {\r",
													"            return true\r",
													"        }\r",
													"    };\r",
													"    return false\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Headers of out-of-MW-SDN-domain Convenience Service =================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfOutOfMwSdnDomainServices = [];\r",
													"var listOfConnectedMountNames = [];\r",
													"var linkId;\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    let services;\r",
													"    services = ExtractCollectionInput(collectionInputList, \"services\");\r",
													"    listOfOutOfMwSdnDomainServices = services.listOfOutOfMwSdnDomainServices;\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\");\r",
													"\r",
													"    linkId = services.linkId\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = ReturnOneStringFromList(listOfOutOfMwSdnDomainServices);\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + servicePath;\r",
													"\r",
													"    let requestBody;\r",
													"    switch(servicePath) {\r",
													"        case \"/v1/provide-list-of-device-interfaces\":\r",
													"        case \"/v1/provide-list-of-actual-device-equipment\":\r",
													"            let mountName;\r",
													"            mountName = ReturnOneStringFromList(listOfConnectedMountNames);\r",
													"            requestBody = '{ \"mount-name\": \"' + mountName + '\" }';\r",
													"            break;\r",
													"        case \"/v1/provide-list-of-parallel-links\":\r",
													"            requestBody = '{ \"link-id\": \"' + linkId + '\" }';\r",
													"            break;\r",
													"        case \"/v1/provide-list-of-connected-devices\":\r",
													"        default:\r",
													"            requestBody = '{}';\r",
													"    }\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "intraDomainServiceForHeaders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseHeaders = [];\r",
													"try {\r",
													"    responseHeaders = pm.response.headers.members\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: \"not relevant for validating headers\",\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    console.log(\"responseHeaders: \");\r",
													"    console.log(responseHeaders);\r",
													"\r",
													"    let assertionName = \"x-correlator header has been provided\";\r",
													"    let result;\r",
													"    let failureReason = \"x-correlator header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    let assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"exec-time header has been provided\";\r",
													"    failureReason = \"exec-time header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"backend-time header has been provided\";\r",
													"    failureReason = \"backend-time header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"life-cycle-state header has been provided\";\r",
													"    failureReason = \"life-cycle-state header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation of headers could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ConfirmHeaderBeingProvided(responseHeaders, header) {\r",
													"    for(let i=0; i<responseHeaders.length; i++) {\r",
													"        if(responseHeaders[i].key==header) {\r",
													"            return true\r",
													"        }\r",
													"    };\r",
													"    return false\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Headers of intra-domain Service =====================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfIntraDomainServicesWithoutRequestBody = [];\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    let services;\r",
													"    services = ExtractCollectionInput(collectionInputList, \"services\");\r",
													"    listOfIntraDomainServicesWithoutRequestBody = services.listOfIntraDomainServicesWithoutRequestBody\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = ReturnOneStringFromList(listOfIntraDomainServicesWithoutRequestBody);\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + servicePath;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Resources",
					"item": [
						{
							"name": "Completeness",
							"item": [
								{
									"name": "controlConstruct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-capability\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-capability\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No alarm-capability found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-configuration\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-configuration\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No alarm-configuration found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"current-alarms\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"current-alarms\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No current-alarms found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-event-records\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"alarms-1-0:alarm-pac\"][\"alarm-event-records\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No alarm-event-records found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"equipment\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"equipment\"] = []\r",
													"        } else {\r",
													"            console.log(\"No equipment found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"firmware-1-0:firmware-collection\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"firmware-1-0:firmware-collection\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No firmware-1-0:firmware-collection found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"profile-collection\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"profile-collection\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No profile-collection found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"] = []\r",
													"        } else {\r",
													"            console.log(\"No logical-termination-point found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"forwarding-domain\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"forwarding-domain\"] = []\r",
													"        } else {\r",
													"            console.log(\"No forwarding-domain found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-capability\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-capability\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No backup-and-restore-capability found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-configuration\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-configuration\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No backup-and-restore-configuration found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-status\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"backup-and-restore-1-0:backup-and-restore-pac\"][\"backup-and-restore-status\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No backup-and-restore-status found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"equipment-augment-1-0:protocol-collection\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"equipment-augment-1-0:protocol-collection\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No protocol-collection found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"synchronization-1-0:clock-collection\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"synchronization-1-0:clock-collection\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No clock-collection found.\")\r",
													"        };\r",
													"        if ( responseObject[\"core-model-1-4:control-construct\"][0][\"synchronization-1-0:ne-sync-pac\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:control-construct\"][0][\"synchronization-1-0:ne-sync-pac\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No ne-sync-pac found.\")\r",
													"        }\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"core-model-1-4:control-construct\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\":                                     { \"type\": \"string\" },\r",
													"                        \"alarms-1-0:alarm-pac\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"alarm-capability\":                 { \"type\": \"object\" },\r",
													"                                \"alarm-configuration\":              { \"type\": \"object\" },\r",
													"                                \"current-alarms\":                   { \"type\": \"object\" },\r",
													"                                \"alarm-event-records\":              { \"type\": \"object\" }\r",
													"                            },\r",
													"                            \"required\": [\r",
													"                                \"alarm-capability\",\r",
													"                                \"alarm-configuration\",\r",
													"                                \"current-alarms\",\r",
													"                                \"alarm-event-records\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"top-level-equipment\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"equipment-augment-1-0:control-construct-pac\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"external-label\":                   { \"type\": \"string\" },\r",
													"                                \"last-config-change-timestamp\":     { \"type\": \"string\" }\r",
													"                            },\r",
													"                            \"required\": [\r",
													"                                \"external-label\",\r",
													"                                \"last-config-change-timestamp\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"equipment\":                                { \"type\": \"array\" },\r",
													"                        \"firmware-1-0:firmware-collection\":         { \"type\": \"object\" },\r",
													"                        \"profile-collection\":                       { \"type\": \"object\" },\r",
													"                        \"logical-termination-point\":                { \"type\": \"array\" },\r",
													"                        \"forwarding-domain\":                        { \"type\": \"array\" },\r",
													"                        \"backup-and-restore-1-0:backup-and-restore-pac\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"backup-and-restore-capability\":    { \"type\": \"object\" },\r",
													"                                \"backup-and-restore-configuration\": { \"type\": \"object\" },\r",
													"                                \"backup-and-restore-status\":        { \"type\": \"object\" }\r",
													"                            },\r",
													"                            \"required\": [\r",
													"                                \"backup-and-restore-capability\",\r",
													"                                \"backup-and-restore-configuration\",\r",
													"                                \"backup-and-restore-status\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"equipment-augment-1-0:protocol-collection\":{ \"type\": \"object\" },\r",
													"                        \"synchronization-1-0:clock-collection\":     { \"type\": \"object\" },\r",
													"                        \"synchronization-1-0:ne-sync-pac\":          { \"type\": \"object\" },\r",
													"\r",
													"                        \"external-managed-id\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"external-managed-uuid\":            { \"type\": \"string\" },\r",
													"                                \"manager-identifier\":               { \"type\": \"string\" }\r",
													"                            }\r",
													"                        },\r",
													"                        \"local-id\":                                 { \"type\": \"string\" },\r",
													"                        \"name\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"label\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"extension\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"administrative-control\":                   { \"enum\": [\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_PASSIVE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_ACTIVE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_IMMEDIATE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_QUIESCENT\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"administrative-state\":                     { \"enum\": [\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_LOCKED\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_SHUTTING_DOWN\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"operational-state\":                        { \"enum\": [\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_DISABLED\",\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_ENABLED\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"lifecycle-state\":                          { \"enum\": [\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_PLANNED\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_AVAILABLE\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_BUSY\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_INSTALLED\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_PENDING_REMOVAL\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"address\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [\r",
													"                                {\r",
													"                                    \"type\": \"string\"\r",
													"                                }\r",
													"                            ]\r",
													"                        }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"alarms-1-0:alarm-pac\",\r",
													"                        \"top-level-equipment\",\r",
													"                        \"equipment-augment-1-0:control-construct-pac\",\r",
													"                        \"equipment\",\r",
													"                        \"firmware-1-0:firmware-collection\",\r",
													"                        \"profile-collection\",\r",
													"                        \"logical-termination-point\",\r",
													"                        \"forwarding-domain\",\r",
													"                        \"backup-and-restore-1-0:backup-and-restore-pac\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"core-model-1-4:control-construct\"\r",
													"        ]\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: JSON.stringify(responseObject),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of .../control-construct={mountName} is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of .../control-construct={mountName} could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of .../control-construct={mountName} is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /control-construct ==================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfConnectedMountNames = [];\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let resourcePath;\r",
													"    resourcePath = \"/core-model-1-4:network-control-domain=cache/control-construct={mountName}\";\r",
													"    let mountName;\r",
													"    mountName = ReturnOneStringFromList(listOfConnectedMountNames);\r",
													"\r",
													"    resourcePath = FillMountNameIntoPathToControlConstruct(resourcePath, mountName);\r",
													"\r",
													"    let filters;\r",
													"    filters = \"\";\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + resourcePath + filters;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function FillMountNameIntoPathToControlConstruct(pathToControlConstruct, mountNameUnderTest) {\r",
													"    let subStringToBeReplaced = \"{mountName}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = pathToControlConstruct.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = pathToControlConstruct.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = pathToControlConstruct.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    pathToControlConstruct = precedingSubString + mountNameUnderTest + subsequentSubString;\r",
													"    return pathToControlConstruct\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "logicalTerminationPoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"\r",
													"        if ( responseObject[\"core-model-1-4:logical-termination-point\"][0][\"ltp-augment-1-0:ltp-augment-pac\"] != undefined ) {\r",
													"            responseObject[\"core-model-1-4:logical-termination-point\"][0][\"ltp-augment-1-0:ltp-augment-pac\"] = {}\r",
													"        } else {\r",
													"            console.log(\"No ltp-augment-pac found.\");\r",
													"        };\r",
													"\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"air-interface-2-0:air-interface-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"ethernet-container-2-0:ethernet-container-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"mac-interface-1-0:mac-interface-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"vlan-interface-1-0:vlan-interface-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"wire-interface-2-0:wire-interface-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"ip-interface-1-0:ip-interface-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"synchronization-1-0:ptp-in-band-pac\"] = {};\r",
													"        responseObject[\"core-model-1-4:logical-termination-point\"][0][\"layer-protocol\"][0][\"synchronization-1-0:ssm-in-band-pac\"] = {}\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"core-model-1-4:logical-termination-point\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\":                                     { \"type\": \"string\" },\r",
													"                        \"server-ltp\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"client-ltp\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"layer-protocol\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"local-id\":                     { \"type\": \"string\" },\r",
													"                                    \"layer-protocol-name\":          { \"type\": \"string\" },\r",
													"                                    \"air-interface-2-0:air-interface-pac\":                      { \"type\": \"object\" },\r",
													"                                    \"ethernet-container-2-0:ethernet-container-pac\":            { \"type\": \"object\" },\r",
													"                                    \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\":          { \"type\": \"object\" },\r",
													"                                    \"mac-interface-1-0:mac-interface-pac\":                      { \"type\": \"object\" },\r",
													"                                    \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\":  { \"type\": \"object\" },\r",
													"                                    \"vlan-interface-1-0:vlan-interface-pac\":                    { \"type\": \"object\" },\r",
													"                                    \"wire-interface-2-0:wire-interface-pac\":                    { \"type\": \"object\" },\r",
													"                                    \"ip-interface-1-0:ip-interface-pac\":                        { \"type\": \"object\" },\r",
													"                                    \"synchronization-1-0:ptp-in-band-pac\":                      { \"type\": \"object\" },\r",
													"                                    \"synchronization-1-0:ssm-in-band-pac\":                      { \"type\": \"object\" },\r",
													"\r",
													"                                    \"configured-client-capacity\":   { \"type\": \"string\" },\r",
													"                                    \"lp-direction\":                 { \"enum\": [\r",
													"                                            \"core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL\",\r",
													"                                            \"core-model-1-4:TERMINATION_DIRECTION_SINK\",\r",
													"                                            \"core-model-1-4:TERMINATION_DIRECTION_SOURCE\",\r",
													"                                            \"core-model-1-4:TERMINATION_DIRECTION_UNDEFINED_OR_UNKNOWN\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"termination-state\":            { \"enum\": [\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_LP_CAN_NEVER_TERMINATE\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_LP_NOT_TERMINATED\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_TERMINATED_SERVER_TO_CLIENT_FLOW\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_TERMINATED_CLIENT_TO_SERVER_FLOW\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_TERMINATED_BIDIRECTIONAL\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_LP_PERMENANTLY_TERMINATED\",\r",
													"                                            \"core-model-1-4:TERMINATION_STATE_TERMINATION_STATE_UNKNOWN\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"configuration-and-switch-control\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": [                  { \"type\": \"string\" }\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"is-protection-lock-out\":       { \"type\": \"boolean\" },\r",
													"                                    \"fc-blocks-signal-to-lp\":       { \"type\": \"string\" },\r",
													"                                    \"name\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": {\r",
													"                                            \"type\": \"object\",\r",
													"                                            \"properties\": {\r",
													"                                                \"value-name\":       { \"type\": \"string\" },\r",
													"                                                \"value\":            { \"type\": \"string\" }\r",
													"                                            }\r",
													"                                        }\r",
													"                                    },\r",
													"                                    \"label\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": {\r",
													"                                            \"type\": \"object\",\r",
													"                                            \"properties\": {\r",
													"                                                \"value-name\":       { \"type\": \"string\" },\r",
													"                                                \"value\":            { \"type\": \"string\" }\r",
													"                                            }\r",
													"                                        }\r",
													"                                    },\r",
													"                                    \"extension\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": {\r",
													"                                            \"type\": \"object\",\r",
													"                                            \"properties\": {\r",
													"                                                \"value-name\":       { \"type\": \"string\" },\r",
													"                                                \"value\":            { \"type\": \"string\" }\r",
													"                                            }\r",
													"                                        }\r",
													"                                    },\r",
													"                                    \"administrative-control\":       { \"enum\": [\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_PASSIVE\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_ACTIVE\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_IMMEDIATE\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_CONTROL_QUIESCENT\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"administrative-state\":         { \"enum\": [\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_STATE_LOCKED\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED\",\r",
													"                                            \"core-model-1-4:ADMINISTRATIVE_STATE_SHUTTING_DOWN\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"operational-state\":            { \"enum\": [\r",
													"                                            \"core-model-1-4:OPERATIONAL_STATE_DISABLED\",\r",
													"                                            \"core-model-1-4:OPERATIONAL_STATE_ENABLED\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"lifecycle-state\":              { \"enum\": [\r",
													"                                            \"core-model-1-4:LIFECYCLE_STATE_PLANNED\",\r",
													"                                            \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_AVAILABLE\",\r",
													"                                            \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_BUSY\",\r",
													"                                            \"core-model-1-4:LIFECYCLE_STATE_INSTALLED\",\r",
													"                                            \"core-model-1-4:LIFECYCLE_STATE_PENDING_REMOVAL\"\r",
													"                                        ]\r",
													"                                    },\r",
													"                                    \"address\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": [                  { \"type\": \"string\" }\r",
													"                                        ]\r",
													"                                    }\r",
													"                                },\r",
													"                                \"required\": [\r",
													"                                    \"local-id\",\r",
													"                                    \"layer-protocol-name\"\r",
													"                                ]\r",
													"                            }\r",
													"                        },\r",
													"                        \"ltp-augment-1-0:ltp-augment-pac\":          { \"type\": \"object\" },\r",
													"                        \"operational-state\":                        { \"enum\": [\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_DISABLED\",\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_ENABLED\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"synchronization-1-0:embedded-clock\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                  { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"\r",
													"                        \"connected-ltp\":                            { \"type\": \"string\" },\r",
													"                        \"peer-ltp\":                                 { \"type\": \"string\" },\r",
													"                        \"physical-port-reference\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"ltp-in-other-view\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"ltp-direction\":                            { \"enum\": [\r",
													"                                \"core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL\",\r",
													"                                \"core-model-1-4:TERMINATION_DIRECTION_SINK\",\r",
													"                                \"core-model-1-4:TERMINATION_DIRECTION_SOURCE\",\r",
													"                                \"core-model-1-4:TERMINATION_DIRECTION_UNDEFINED_OR_UNKNOWN\"\r",
													"                            ] \r",
													"                        },\r",
													"                        \"transfer-capacity-pac\":                    { \"type\": \"string\" },\r",
													"                        \"fd-rule-group\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        },\r",
													"                        \"supporting-pc\":                            { \"type\": \"string\" },\r",
													"                        \"external-managed-id\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"external-managed-uuid\":            { \"type\": \"string\" },\r",
													"                                \"manager-identifier\":               { \"type\": \"string\" }\r",
													"                            }\r",
													"                        },\r",
													"                        \"local-id\":                                 { \"type\": \"string\" },\r",
													"                        \"name\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"label\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"extension\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                   { \"type\": \"string\" },\r",
													"                                    \"value\":                        { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"administrative-control\":                   { \"enum\": [\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_PASSIVE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_ACTIVE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_LOCK_IMMEDIATE\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_CONTROL_QUIESCENT\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"administrative-state\":                     { \"enum\": [\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_LOCKED\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED\",\r",
													"                                \"core-model-1-4:ADMINISTRATIVE_STATE_SHUTTING_DOWN\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"lifecycle-state\":                          { \"enum\": [\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_PLANNED\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_AVAILABLE\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_POTENTIAL_BUSY\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_INSTALLED\",\r",
													"                                \"core-model-1-4:LIFECYCLE_STATE_PENDING_REMOVAL\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"address\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": [                              { \"type\": \"string\" }\r",
													"                            ]\r",
													"                        }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"layer-protocol\",\r",
													"                        \"ltp-augment-1-0:ltp-augment-pac\",\r",
													"                        \"operational-state\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"core-model-1-4:logical-termination-point\"\r",
													"        ]\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: JSON.stringify(responseObject),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of .../control-construct={mountName}/logical-termination-point={uuid} is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of .../control-construct={mountName}/logical-termination-point={uuid} could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of .../control-construct={mountName}/logical-termination-point={uuid} is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /logical-termination-point ==========================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var interfacesAtDevice = {};\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    interfacesAtDevice = pm.environment.get(\"interfacesAtDevice\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let resourcePath;\r",
													"    resourcePath = \"/core-model-1-4:network-control-domain=cache/control-construct={mountName}/logical-termination-point={uuid}\";\r",
													"    let mountName;\r",
													"    mountName = interfacesAtDevice.mountName;\r",
													"    resourcePath = FillMountNameIntoPathToControlConstruct(resourcePath, mountName);\r",
													"    let uuid;\r",
													"    uuid = ReturnOneUuidFromListOfInterfaces(interfacesAtDevice.listOfInterfaces);\r",
													"    resourcePath = FillUuidIntoResourcePath(resourcePath, uuid);\r",
													"\r",
													"    let filters;\r",
													"    filters = \"\";\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + resourcePath + filters;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneUuidFromListOfInterfaces(listOfInterfaces) {\r",
													"    try {\r",
													"        let randomlyChosenInterface;\r",
													"        randomlyChosenInterface = Math.floor( Math.random() * listOfInterfaces.length);\r",
													"        return listOfInterfaces[randomlyChosenInterface].uuid\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function FillMountNameIntoPathToControlConstruct(pathToControlConstruct, mountNameUnderTest) {\r",
													"    let subStringToBeReplaced = \"{mountName}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = pathToControlConstruct.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = pathToControlConstruct.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = pathToControlConstruct.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    pathToControlConstruct = precedingSubString + mountNameUnderTest + subsequentSubString;\r",
													"    return pathToControlConstruct\r",
													"}\r",
													"\r",
													"function FillUuidIntoResourcePath(resourcePath, uuid) {\r",
													"    let subStringToBeReplaced = \"{uuid}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = resourcePath.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = resourcePath.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = resourcePath.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    resourcePath = precedingSubString + uuid + subsequentSubString;\r",
													"    return resourcePath\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "equipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"\r",
													"        try {\r",
													"            responseObject[\"core-model-1-4:equipment\"][0][\"connector\"] = []\r",
													"        } catch (error) {\r",
													"            console.log(\"No connectorList found.\")\r",
													"        }\r",
													"\r",
													"        try {\r",
													"            responseObject[\"core-model-1-4:equipment\"][0][\"contained-holder\"] = []\r",
													"        } catch (error) {\r",
													"            console.log(\"No holderList found.\")\r",
													"        }\r",
													"\r",
													"        try {\r",
													"            responseObject[\"core-model-1-4:equipment\"][0][\"expected-equipment\"] = []\r",
													"        } catch (error) {\r",
													"            console.log(\"No expectedEquipmentLocalId found.\")\r",
													"        }\r",
													"\r",
													"        try {\r",
													"            responseObject[\"core-model-1-4:equipment\"][0][\"actual-equipment\"] = {}\r",
													"        } catch (error) {\r",
													"            console.log(\"No actualEquipment found.\")\r",
													"        }\r",
													"\r",
													"    } else {\r",
													"        responseObject = {};\r",
													"        console.log(\"Top level equipment could not be retrieved.\")\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"core-model-1-4:equipment\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\":                                             { \"type\": \"string\" },\r",
													"                        \"operational-state\":                                { \"enum\": [\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_DISABLED\",\r",
													"                                \"core-model-1-4:OPERATIONAL_STATE_ENABLED\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"connector\":                                        { \"type\": \"array\" },\r",
													"                        \"contained-holder\":                                 { \"type\": \"array\" },\r",
													"                        \"expected-equipment\":                               { \"type\": \"array\" },\r",
													"                        \"actual-equipment\":                                 { \"type\": \"object\" },\r",
													"\r",
													"                        \"is-field-replaceable\":                             {\"type\": \"boolean\"},\r",
													"                        \"structure\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\": {\r",
													"                                \"category\":                                 { \"enum\": [\r",
													"                                        \"core-model-1-4:EQUIPMENT_CATEGORY_SUBRACK\",\r",
													"                                        \"core-model-1-4:EQUIPMENT_CATEGORY_CIRCUIT_PACK\",\r",
													"                                        \"core-model-1-4:EQUIPMENT_CATEGORY_SMALL_FORMFACTOR_PLUGGABLE\",\r",
													"                                        \"core-model-1-4:EQUIPMENT_CATEGORY_STAND_ALONE_UNIT\",\r",
													"                                        \"core-model-1-4:EQUIPMENT_CATEGORY_RACK\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_BACKPLANE\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_POWER_UNIT\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_BATTERY\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_FAN\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_CENTRAL_PROCESSING_UNIT\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_STORAGE_DRIVE\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_SENSOR\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_MODEM\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_PORT_EXPANSION_BOARD\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_OUTDOOR_UNIT\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_FULL_OUTDOOR_UNIT\",\r",
													"                                        \"equipment-augment-1-0:EQUIPMENT_CATEGORY_NOT_YET_DEFINED\"\r",
													"                                    ]\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"function-block\":                                   {\"type\": \"array\"},\r",
													"                        \"equipment-functional-boundary\":                    {\"type\": \"string\"},\r",
													"                        \"external-managed-id\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"properties\":{\r",
													"                                \"external-managed-uuid\":                    {\"type\": \"string\"}, \r",
													"                                \"manager-identifier\":                       {\"type\": \"string\"}\r",
													"                            }\r",
													"                        },\r",
													"                        \"local-id\":                                         {\"type\": \"string\"},\r",
													"                        \"name\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": { \r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                           { \"type\": \"string\" },\r",
													"                                \"value\":                                    { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"label\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": { \r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                           { \"type\": \"string\" },\r",
													"                                    \"value\":                                { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"extension\": { \r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": { \r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"value-name\":                           { \"type\": \"string\" },\r",
													"                                    \"value\":                                { \"type\": \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        },\r",
													"                        \"administrative-control\":                           { \"type\": \"string\" },\r",
													"                        \"administrative-state\":                             { \"type\": \"string\" },\r",
													"                        \"lifecycle-state\":                                  { \"type\": \"string\" },\r",
													"                        \"address\":                                          {\"type\": \"array\"}\r",
													"\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"operational-state\",\r",
													"                        \"expected-equipment\",\r",
													"                        \"actual-equipment\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [ \r",
													"            \"core-model-1-4:equipment\"\r",
													"        ]\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: JSON.stringify(responseObject),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of .../control-construct={mountName}/equipment={uuid} is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of .../control-construct={mountName}/equipment={uuid} could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of .../control-construct={mountName}/equipment={uuid} is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Completeness of /equipment ==========================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var actualEquipmentAtDevice = {};\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    actualEquipmentAtDevice = pm.environment.get(\"actualEquipmentAtDevice\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let resourcePath;\r",
													"    resourcePath = \"/core-model-1-4:network-control-domain=cache/control-construct={mountName}/equipment={uuid}\";\r",
													"    let mountName;\r",
													"    mountName = actualEquipmentAtDevice.mountName;\r",
													"    resourcePath = FillMountNameIntoPathToControlConstruct(resourcePath, mountName);\r",
													"    let uuid;\r",
													"    uuid = actualEquipmentAtDevice.topLevelEquipment[0];\r",
													"    resourcePath = FillUuidIntoResourcePath(resourcePath, uuid);\r",
													"\r",
													"    let filters;\r",
													"    filters = \"\";\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + resourcePath + filters;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function FillMountNameIntoPathToControlConstruct(pathToControlConstruct, mountNameUnderTest) {\r",
													"    let subStringToBeReplaced = \"{mountName}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = pathToControlConstruct.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = pathToControlConstruct.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = pathToControlConstruct.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    pathToControlConstruct = precedingSubString + mountNameUnderTest + subsequentSubString;\r",
													"    return pathToControlConstruct\r",
													"}\r",
													"\r",
													"function FillUuidIntoResourcePath(resourcePath, uuid) {\r",
													"    let subStringToBeReplaced = \"{uuid}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = resourcePath.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = resourcePath.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = resourcePath.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    resourcePath = precedingSubString + uuid + subsequentSubString;\r",
													"    return resourcePath\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Headers",
							"item": [
								{
									"name": "outOfMwSdnDomainResourceForHeaders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseHeaders = [];\r",
													"try {\r",
													"    responseHeaders = pm.response.headers.members\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: \"not relevant for validating headers\",\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"};\r",
													"try {\r",
													"    console.log(\"responseHeaders: \");\r",
													"    console.log(responseHeaders);\r",
													"\r",
													"    let assertionName = \"life-cycle-state header has been provided\";\r",
													"    let result;\r",
													"    let failureReason = \"life-cycle-state header is missing\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\") == true ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"life-cycle-state\")).to.be.true;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    let assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"x-correlator header hasn't been provided\";\r",
													"    failureReason = \"x-correlator header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"x-correlator\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"exec-time header hasn't been provided\";\r",
													"    failureReason = \"exec-time header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"exec-time\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    assertionName = \"backend-time header hasn't been provided\";\r",
													"    failureReason = \"backend-time header is available\";\r",
													"    if ( ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\") == false ) {\r",
													"        console.log(\"ok: \" + assertionName)\r",
													"    } else {\r",
													"        console.log(\"FAIL: \" + failureReason)\r",
													"    };\r",
													"    pm.test(assertionName, function () {\r",
													"        result = \"FAIL\";\r",
													"        pm.expect(ConfirmHeaderBeingProvided(responseHeaders,\"backend-time\")).to.be.false;\r",
													"        result = \"PASS\";\r",
													"        failureReason = \"\"\r",
													"    });\r",
													"    assertionResult = {\r",
													"        assertionName: assertionName,\r",
													"        result: result,\r",
													"        failureReason: failureReason\r",
													"    };\r",
													"    requestResult.results.push(assertionResult);\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation of headers could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ConfirmHeaderBeingProvided(responseHeaders, header) {\r",
													"    for(let i=0; i<responseHeaders.length; i++) {\r",
													"        if(responseHeaders[i].key==header) {\r",
													"            return true\r",
													"        }\r",
													"    };\r",
													"    return false\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== Headers of out-of-MW-SDN-domain Resource Path =======================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfConnectedMountNames = [];\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let resourcePath;\r",
													"    resourcePath = \"/core-model-1-4:network-control-domain=cache/control-construct={mountName}/firmware-1-0:firmware-collection\";\r",
													"    let mountName;\r",
													"    mountName = ReturnOneStringFromList(listOfConnectedMountNames);\r",
													"    resourcePath = FillMountNameIntoPathToControlConstruct(resourcePath, mountName);\r",
													"\r",
													"    let filters;\r",
													"    filters = \"\";\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + resourcePath + filters;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function FillMountNameIntoPathToControlConstruct(pathToControlConstruct, mountNameUnderTest) {\r",
													"    let subStringToBeReplaced = \"{mountName}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = pathToControlConstruct.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = pathToControlConstruct.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = pathToControlConstruct.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    pathToControlConstruct = precedingSubString + mountNameUnderTest + subsequentSubString;\r",
													"    return pathToControlConstruct\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "?fields",
							"item": [
								{
									"name": "controlConstruct?fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n===== /control-construct?fields ===========================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var mdip = {};\r",
													"var listOfConnectedMountNames = [];\r",
													"try {\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    mdip = ExtractServerInformation(serverList, \"mdip\");\r",
													"\r",
													"    listOfConnectedMountNames = pm.environment.get(\"listOfConnectedMountNames\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let resourcePath;\r",
													"    resourcePath = \"/core-model-1-4:network-control-domain=cache/control-construct={mountName}\";\r",
													"    let mountName;\r",
													"    mountName = ReturnOneStringFromList(listOfConnectedMountNames);\r",
													"    resourcePath = FillMountNameIntoPathToControlConstruct(resourcePath, mountName);\r",
													"\r",
													"    let filters;\r",
													"    // filters = \"?fields=top-level-equipment;equipment(uuid);logical-termination-point(layer-protocol(layer-protocol-name))\"\r",
													"    filters = \"?fields=top-level-equipment%3Bequipment%28uuid%29%3Blogical-termination-point%28layer-protocol%28layer-protocol-name%29%29\";\r",
													"\r",
													"    let uri;\r",
													"    uri = mdip.server + resourcePath + filters;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: mdip.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: mdip.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: mdip.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: mdip.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: mdip.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: mdip.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: mdip.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ReturnOneStringFromList(listOfStrings) {\r",
													"    try {\r",
													"        let randomlyChosenInstance;\r",
													"        randomlyChosenInstance = Math.floor( Math.random() * listOfStrings.length);\r",
													"        return listOfStrings[randomlyChosenInstance]\r",
													"    } catch (error) {\r",
													"        console.log(\"! Chosing a random string failed.\");\r",
													"        return \"\"\r",
													"    }\r",
													"}\r",
													"\r",
													"function FillMountNameIntoPathToControlConstruct(pathToControlConstruct, mountNameUnderTest) {\r",
													"    let subStringToBeReplaced = \"{mountName}\";\r",
													"    let indexOfStartOfSubStringToBeReplaced = pathToControlConstruct.lastIndexOf(subStringToBeReplaced);\r",
													"    let precedingSubString = pathToControlConstruct.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
													"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
													"    let subsequentSubString = pathToControlConstruct.slice(indexOfEndOfSubStringToBeReplaced);\r",
													"    pathToControlConstruct = precedingSubString + mountNameUnderTest + subsequentSubString;\r",
													"    return pathToControlConstruct\r",
													"}\r",
													"\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    console.log(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var listOfResults = [];\r",
													"try {\r",
													"    listOfResults = pm.environment.get(\"listOfResults\")\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"\r",
													"    } else {\r",
													"        responseObject = {}\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"            \"core-model-1-4:control-construct\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                        \"uuid\":                                         { \"type\": \"string\" },\r",
													"                        \"top-level-equipment\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\":                                    { \"type\": \"string\" }\r",
													"                        },\r",
													"                        \"equipment\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"uuid\":                             { \"type\": \"string\" }\r",
													"                                },\r",
													"                                \"required\": [\r",
													"                                    \"uuid\"\r",
													"                                ]\r",
													"                            }\r",
													"                        },\r",
													"                        \"logical-termination-point\": {\r",
													"                            \"type\": \"array\",\r",
													"                            \"items\": {\r",
													"                                \"type\": \"object\",\r",
													"                                \"properties\": {\r",
													"                                    \"uuid\":                             { \"type\": \"string\" },\r",
													"                                    \"layer-protocol\": {\r",
													"                                        \"type\": \"array\",\r",
													"                                        \"items\": {\r",
													"                                            \"type\": \"object\",\r",
													"                                            \"properties\": {\r",
													"                                                \"local-id\":             { \"type\": \"string\" },\r",
													"                                                \"layer-protocol-name\":  { \"type\": \"string\" }\r",
													"                                            },\r",
													"                                            \"required\": [\r",
													"                                                \"local-id\",\r",
													"                                                \"layer-protocol-name\"\r",
													"                                            ]\r",
													"                                        }\r",
													"                                    }\r",
													"                                },\r",
													"                                \"required\": [\r",
													"                                    \"uuid\",\r",
													"                                    \"layer-protocol\"\r",
													"                                ]\r",
													"                            }\r",
													"                        }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                        \"uuid\",\r",
													"                        \"top-level-equipment\",\r",
													"                        \"equipment\",\r",
													"                        \"logical-termination-point\",\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"required\": [\r",
													"            \"core-model-1-4:control-construct\"\r",
													"        ]\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"var requestResult = {\r",
													"    requestName: pm.info.requestName,\r",
													"    method: pm.request.method,\r",
													"    url: pm.request.url.toString(),\r",
													"    requestBody: pm.request.body.raw,\r",
													"    responseCode: pm.response.code,\r",
													"    responseBody: pm.response.text(),\r",
													"    responseHeaders: pm.response.headers.toString(),\r",
													"    executionDuration: pm.response.responseTime,\r",
													"    results: []\r",
													"}\r",
													"try {\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let validationResult;\r",
													"        validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"\r",
													"        console.log(\"Reference Schema:\");\r",
													"        console.log(reference);\r",
													"\r",
													"        console.log(\"Interface Response:\");\r",
													"        console.log(responseObject);\r",
													"\r",
													"        console.log(\"Validation Errors:\");\r",
													"        console.log(validationResult.errors);\r",
													"\r",
													"        let assertionName = \"Response of .../control-construct={mountName}?fields= is complete\";\r",
													"        let result;\r",
													"        let failureReason = \"Validation with tv4 had findings\";\r",
													"        if ( validationResult.valid == true ) {\r",
													"            console.log(\"ok: \" + assertionName)\r",
													"        } else {\r",
													"            console.log(\"FAIL: \" + failureReason)\r",
													"        };\r",
													"        pm.test(assertionName, function () {\r",
													"            result = \"FAIL\";\r",
													"            pm.expect(validationResult.valid).to.be.true;\r",
													"            result = \"PASS\";\r",
													"            failureReason = \"\";\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    } else {\r",
													"        let assertionName = \"Response of .../control-construct={mountName}?fields= could be loaded\";\r",
													"        let result = \"FAIL\";\r",
													"        let failureReason = \"ResponseCode of .../control-construct={mountName}?fields= is \" + pm.response.code;\r",
													"        console.log(\"FAIL: \" + failureReason);\r",
													"        pm.test(assertionName, function () {\r",
													"            pm.expect(false).to.be.true\r",
													"        });\r",
													"        let assertionResult = {\r",
													"            assertionName: assertionName,\r",
													"            result: result,\r",
													"            failureReason: failureReason\r",
													"        };\r",
													"        requestResult.results.push(assertionResult)\r",
													"\r",
													"    }\r",
													"\r",
													"    listOfResults.push(requestResult)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! validation for completeness could not be executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.environment.set(\"listOfResults\", listOfResults)\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "forClearingEnvironment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var listOfResults = [];\r",
									"var resultServer = {};\r",
									"try {\r",
									"    listOfResults = pm.environment.get(\"listOfResults\");\r",
									"\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    resultServer = ExtractServerInformation(serverList, \"resultServer\")\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"var record = {};\r",
									"try {\r",
									"    listOfResults.shift();\r",
									"\r",
									"    let numberOfTests;\r",
									"    numberOfTests = CountAllTests(listOfResults);\r",
									"\r",
									"    let numberOfPassed;\r",
									"    numberOfPassed = CountPassedTests(listOfResults);\r",
									"\r",
									"    let numberOfFailed;\r",
									"    numberOfFailed = CountFailedTests(listOfResults);\r",
									"\r",
									"    let numberOfSkipped;\r",
									"    numberOfSkipped = numberOfTests - numberOfPassed - numberOfFailed;\r",
									"\r",
									"    let averageResponseTime;\r",
									"    averageResponseTime = CalculateAverageResponseTime(listOfResults);\r",
									"\r",
									"    let summary = {};\r",
									"    summary.numberOfTests = numberOfTests;\r",
									"    summary.numberOfPassed = numberOfPassed;\r",
									"    summary.numberOfFailed = numberOfFailed;\r",
									"    summary.numberOfSkipped = numberOfSkipped;\r",
									"    summary.averageResponseTime = averageResponseTime;\r",
									"\r",
									"    record.summary = summary;\r",
									"    record.listOfResults = listOfResults;\r",
									"    console.log(\"record:\");\r",
									"    console.log(record);\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! record could not be composed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = resultServer.server + resultServer.recordServiceName;\r",
									"\r",
									"    let requestBody;\r",
									"    requestBody = JSON.stringify(record);\r",
									"\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"    pm.variables.set(\"requestBody\", requestBody);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: resultServer.authorizationCode });\r",
									"    pm.request.headers.upsert({ key: \"operation-key\", value: resultServer.operationKey });\r",
									"    pm.request.headers.upsert({ key: \"user\", value: resultServer.userName });\r",
									"    pm.request.headers.upsert({ key: \"originator\", value: resultServer.originator });\r",
									"    pm.request.headers.upsert({ key: \"x-correlator\", value: resultServer.xCorrelator });\r",
									"    pm.request.headers.upsert({ key: \"trace-indicator\", value: resultServer.traceIndicator });\r",
									"    pm.request.headers.upsert({ key: \"customer-journey\", value: resultServer.customerJourney });\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function CountAllTests(listOfResults) {\r",
									"    try {\r",
									"        let numberOfTests = 0;\r",
									"        for(let i=0; i<listOfResults.length; i++) {\r",
									"            numberOfTests = numberOfTests + listOfResults[i].results.length;\r",
									"        };\r",
									"        return numberOfTests\r",
									"    } catch (error) {\r",
									"        console.log(\"! counting results failed\");\r",
									"        return -1\r",
									"    }\r",
									"}\r",
									"\r",
									"function CountPassedTests(listOfResults) {\r",
									"    try {\r",
									"        let numberOfPassed = 0;\r",
									"        for(let i=0; i<listOfResults.length; i++) {\r",
									"            for(let j=0; j<listOfResults[i].results.length; j++) {\r",
									"                if( listOfResults[i].results[j].result == \"PASS\" ) {\r",
									"                    numberOfPassed++\r",
									"                }\r",
									"            }\r",
									"        };\r",
									"        return numberOfPassed\r",
									"    } catch (error) {\r",
									"        console.log(\"! counting passed failed\");\r",
									"        return -1\r",
									"    }\r",
									"}\r",
									"\r",
									"function CountFailedTests(listOfResults) {\r",
									"    try {\r",
									"        let numberOfFailed = 0;\r",
									"        for(let i=0; i<listOfResults.length; i++) {\r",
									"            for(let j=0; j<listOfResults[i].results.length; j++) {\r",
									"                if( listOfResults[i].results[j].result == \"FAIL\" ) {\r",
									"                    numberOfFailed++\r",
									"                }\r",
									"            }\r",
									"        };\r",
									"        return numberOfFailed\r",
									"    } catch (error) {\r",
									"        console.log(\"! counting fails failed\");\r",
									"        return -1\r",
									"    }\r",
									"}\r",
									"\r",
									"function CalculateAverageResponseTime(listOfResults) {\r",
									"    try {\r",
									"        let numberOfRequests;\r",
									"        let sumOfAllResponseTimes = 0;\r",
									"        numberOfRequests = listOfResults.length;\r",
									"        for(let i=0; i<listOfResults.length; i++) {\r",
									"            sumOfAllResponseTimes = sumOfAllResponseTimes + listOfResults[i].executionDuration;\r",
									"        };\r",
									"        return sumOfAllResponseTimes/numberOfRequests\r",
									"    } catch (error) {\r",
									"        console.log(\"! calculating averageResponseTime failed\");\r",
									"        return -1\r",
									"    }\r",
									"}\r",
									"\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    console.log(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}